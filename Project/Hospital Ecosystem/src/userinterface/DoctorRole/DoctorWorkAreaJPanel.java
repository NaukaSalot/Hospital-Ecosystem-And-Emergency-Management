/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Employee.EmployeeDirectory;
import Business.Enterprise.Enterprise;

import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import Business.WorkQueue.CheckUpRequest;

import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;

import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nauka Salot
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private LabTestWorkRequest ltwr;
    private WorkRequest workRequest;
    private UserAccountDirectory userAccountDirectory;
    private OrganizationDirectory organizationDirectory;
    private Organization organization;
    private EmployeeDirectory employeeDirectory;
    String value = "\\d+";

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization doctorOrganization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.organization = organization;
        this.enterprise = enterprise;
        btnrequest.setEnabled(false);

        populateTable();
        //To change body of generated methods, choose Tools | Templates.
    }

    public void populateTable() {

        //   String n=txtNurseName.getText();
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {

            Object[] row = new Object[7];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            //   row[2] = request.getReceiver() == null ? null :n ;
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            Employee patient = ((LabTestWorkRequest) request).getPatient();
            row[4] = patient;
            String testResult = ((LabTestWorkRequest) request).getTestResult();
            row[5] = testResult;
//            Date d=((CheckUpRequest) request).getCheckUp().getDate();
            row[6] = request.getMessage();

            model.addRow(row);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        txtrespiratoryrate = new javax.swing.JTextField();
        txtbloodpressure = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtweight = new javax.swing.JTextField();
        txtheartrate = new javax.swing.JTextField();
        btnrequest = new javax.swing.JButton();
        btnsubmit = new javax.swing.JButton();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Sender", "Receiver", "Status", "Patient", "Lab Test Result", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(6).setResizable(false);
        }

        refreshJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/DoctorRole/1449546565_Sync.png"))); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Respiratory Rate");

        jLabel2.setText("Blood Pressure");

        jLabel4.setText("Weight");

        jLabel5.setText("Heart Rate");

        btnrequest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/DoctorRole/1449546495_laboratory.png"))); // NOI18N
        btnrequest.setText("Request Test");
        btnrequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrequestActionPerformed(evt);
            }
        });

        btnsubmit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/DoctorRole/1449545183_floppy.png"))); // NOI18N
        btnsubmit.setText("Submit");
        btnsubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnrequest)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtrespiratoryrate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtbloodpressure, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(120, 120, 120)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtweight, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                    .addComponent(txtheartrate)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(btnsubmit))))
                    .addComponent(refreshJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(refreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtrespiratoryrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtbloodpressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(txtheartrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(btnrequest)
                        .addGap(102, 102, 102))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnsubmit)
                        .addContainerGap(100, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnrequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (workRequestJTable.getValueAt(selectedRow, 3) == "Completed") {
            JOptionPane.showMessageDialog(this, "It has been already assigned!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Employee e = (Employee) workRequestJTable.getValueAt(selectedRow, 4);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestLabTestJPanel", new UserInterface.DoctorRole.RequestLabTestJPanel(userProcessContainer, userAccount, enterprise, e));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnrequestActionPerformed

    private void btnsubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubmitActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        String compare = (String) workRequestJTable.getValueAt(selectedRow, 3);
        if (compare.equalsIgnoreCase("completed")) {
            JOptionPane.showMessageDialog(this, "It has been already completed!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (txtrespiratoryrate.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Respiratory Rate");
            return;
        } else if (!txtrespiratoryrate.getText().matches(value)) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Respiratory Rate");
            return;
        }
        if (txtbloodpressure.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Blood Pressure");
            return;
        } else if (!txtbloodpressure.getText().matches(value)) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Blood Pressure");
            return;
        }
        if (txtheartrate.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Heart Rate");
            return;
        } else if (!txtheartrate.getText().matches(value)) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Heart Rate");
            return;
        }
        if (txtweight.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Weight");
            return;
        } else if (!txtweight.getText().matches(value)) {
            JOptionPane.showMessageDialog(null, "Enter an appropriate Weight");
            return;
        }
//  if(rr.trim()==0 || bp.trim()=0){
//      JOptionPane.showMessageDialog(null,"Enter details!");
//      return;
//  }
        //String result=txtTestResult.getText();
        // JOptionPane.showMessageDialog(null,"Donor details added1");
        int rr = Integer.parseInt(txtrespiratoryrate.getText());
        int bp = Integer.parseInt(txtbloodpressure.getText());
        int weight = Integer.parseInt(txtweight.getText());
        int hr = Integer.parseInt(txtheartrate.getText());
        CheckUpRequest cur = (CheckUpRequest) workRequestJTable.getValueAt(selectedRow, 0);
        //JOptionPane.showMessageDialog(null,"Donor details added1");
        //  wr.setTestResult(result);
        cur.getCheckUp().setRespiratoryRate(rr);
        cur.getCheckUp().setBloodPressure(bp);
        cur.getCheckUp().setHeartRate(hr);
        cur.getCheckUp().setWeight(weight);
        cur.getCheckUp().setDate(new Date());

        cur.setStatus("Sent to Lab"); //labtest
        //txtTestResult.setEnabled(true);
        // wr.setBarCode(barCode);

//        wr.setBloodType(bloodType);
//     wr.setBarCode(barCode);
        JOptionPane.showMessageDialog(null, "Patient details added");
        btnrequest.setEnabled(true);
        btnsubmit.setEnabled(false);


    }//GEN-LAST:event_btnsubmitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnrequest;
    private javax.swing.JButton btnsubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField txtbloodpressure;
    private javax.swing.JTextField txtheartrate;
    private javax.swing.JTextField txtrespiratoryrate;
    private javax.swing.JTextField txtweight;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
